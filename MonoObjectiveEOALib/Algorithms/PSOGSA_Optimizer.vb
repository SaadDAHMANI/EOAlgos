
''' <summary>
''' Implemented based on : PSOGSA source code v3.0, Generated by SeyedAli Mirjalili, 2011. 
''' Adopted from: S. Mirjalili, S.Z. Mohd Hashim, ï¿½A New Hybrid PSOGSA 
''' Algorithm for Function Optimization, in IEEE International Conference 
''' on Computer and Information Application?ICCIA 2010), China, 2010, pp. 374-377.
''' </summary>
Public Class PSOGSA_Optimizer
    Inherits EvolutionaryAlgoBase
    Public Overrides ReadOnly Property AlgorithmName As Object
        Get
            Return "PSOGSA"
        End Get
    End Property

    Public Overrides ReadOnly Property AlgorithmFullName As Object
        Get
            Return "Particle Swarm Optimization - Gravitational Search Algorithm"
        End Get
    End Property

    Private _BestSolution As Double()
    Public Overrides ReadOnly Property BestSolution As Double()
        Get
            Return _BestSolution
        End Get
    End Property

    Private _BestChart = New List(Of Double)
    Public Overrides ReadOnly Property BestChart As List(Of Double)
        Get
            Return _BestChart
        End Get
    End Property

    Private _WorstChart = New List(Of Double)
    Public Overrides ReadOnly Property WorstChart As List(Of Double)
        Get
            Return _WorstChart
        End Get
    End Property

    Private _MeanChart = New List(Of Double)
    Public Overrides ReadOnly Property MeanChart As List(Of Double)
        Get
            Return _MeanChart
        End Get
    End Property

    Public Overrides ReadOnly Property Solution_Fitness As Dictionary(Of String, Double)
        Get
            Throw New NotImplementedException()
        End Get
    End Property

    Private _CurrentBestFitness As Double
    Public Overrides ReadOnly Property CurrentBestFitness As Double
        Get
            Return _CurrentBestFitness
        End Get
    End Property

    Public Overrides Sub RunEpoch()
        G = G0 * Math.Exp((-1 * Alpha * CurrentIteration) / MaxIterations)
        'Bound the search Space
        Space_Bound(Population)

        For i = 0 To N

            'Evaluate the population
            Fitness = 0R
            ComputeObjectiveFunction(Population(i), Fitness)
            Current_fitness(i) = Fitness

            '-----------------------------------------------------------------
            If (pBestScore(i) > Fitness) Then
                pBestScore(i) = Fitness
                For j = 0 To D
                    pBest(i, j) = Current_fitness(i)
                Next
            End If

            If (gBestScore > Fitness) Then
                gBestScore = Fitness
                For j = 0 To D
                    gBest(j) = Population(i)(j) 'Copy the Best solution
                Next
            End If
        Next

        best = Current_fitness.Min 'For minimisation only
        worst = Current_fitness.Max 'For minimisation only
        '---------------------------------------------------------------
        BestChart.Add(gBestScore)
        MeanChart.Add((Current_fitness.Sum / N))
        WorstChart.Add(Current_fitness.Max) 'For minimisation only
        _CurrentBestFitness = gBestScore
        '-----------------------------------------------------------

        ' Calculate Mass :

        For i = 0 To N
            Mass(i) = (Current_fitness(i) - 0.99 * worst) / (best - worst)
        Next

        For i = 0 To N
            Mass(i) = Mass(i) * 5 / Mass.Sum
        Next

        ' Force update :

        For i = 0 To N
            For j = 0 To D
                For k = 0 To N
                    If (Population(k)(j) <> Population(i)(j)) Then
                        '   % Equation (3)
                        Force(i, j) = Force(i, j) + RandomGenerator.NextDouble() * G * Mass(k) * Mass(i) * (Population(k)(j) - Population(i)(j)) / (Math.Abs(Population(k)(j) - Population(i)(j)) + Eps)

                    End If
                Next
            Next
        Next

        'Accelations $ Velocities  UPDATE:

        For i = 0 To N
            For j = 0 To D
                If (Mass(i) <> 0) Then
                    '%Equation (6)
                    Acceleration(i, j) = Force(i, j) / Mass(i)
                End If
            Next
        Next

        For i = 0 To N
            For j = 0 To D
                ' %Equation(9)
                Velocity(i, j) = RandomGenerator.NextDouble() * Velocity(i, j) + C1 * RandomGenerator.NextDouble() * Acceleration(i, j) + C2 * RandomGenerator.NextDouble() * (gBest(j) - Population(i)(j))
            Next
        Next

        'Positions UPDATE :

        '%Equation (10) 
        For i = 0 To N
            For j = 0 To D
                Population(i)(j) = Population(i)(j) + Velocity(i, j)
            Next
        Next

        ''-------------------------------------------
        _BestSolution = gBest

    End Sub

    Public Overrides Sub ComputeObjectiveFunction(positions() As Double, ByRef fitness_Value As Double)
        MyBase.OnObjectiveFunction(positions, fitness_Value)
    End Sub
    Public Sub New()
    End Sub

    Public Sub New(dimensions As Integer, agents As Integer, iterationMax As Integer)
        Dimensions_D = dimensions
        PopulationSize_N = agents
        MaxIterations = iterationMax
    End Sub

    Public Sub New(populationSize As Integer, searchSpaceDimension As Integer, searchSpaceIntervals As List(Of Interval))
        PopulationSize_N = populationSize
        Dimensions_D = searchSpaceDimension
        SearchIntervals = searchSpaceIntervals
        InitializePopulation()
    End Sub

    Public Sub New(gO As Double, alpha_g As Double, c_1 As Double, c_2 As Double)
        Me.G0 = gO
        Me.Alpha = alpha_g
        Me.C1 = c_1
        Me.C2 = c_2
    End Sub
    Public Sub New(populationSize As Integer, dimensions As Integer, iterationMax As Integer, gO As Double, alpha_g As Double, c_1 As Double, c_2 As Double)
        PopulationSize_N = populationSize
        Dimensions_D = dimensions
        MaxIterations = iterationMax
        G0 = gO
        Alpha = alpha_g
        C1 = c_1
        C2 = c_2
    End Sub

#Region "PSOGSA Variables"

    Dim D As Integer
    Dim N As Integer

    '---------------GSA params---------------
    Public Property Alpha As Double = 23.0R
    Public Property G0 As Double = 1.0R

    Private G As Double
    Private Const Eps As Double = 0.000000000000000222
    Private Acceleration As Double(,)

    '-------------PSO Variables ------------
    Private Velocity(,) As Double
    Public Property C1 As Double = 0.5R 'C1 in Equation (9)
    Public Property C2 As Double = 1.5R 'C2 in Equation (9)

    Private Fitness As Double
    Private Current_fitness As Double()
    Private gBest As Double()
    Private pBestScore As Double()
    Private pBest As Double(,)
    Private gBestScore As Double
    Private Mass As Double()
    Private Force As Double(,)
    Dim best, worst As Double

    ''-----for SpaceBound()--------
    Dim Tp As Integer()
    Dim Tm As Integer()
    Dim TpTildeTm As Integer()
    Dim value As Integer = 0I
    Dim TmpArray As Double()
    Dim randiDimm As Double()
    '------------------------------

#End Region

    Public Overrides Sub InitializeOptimizer()

        If SearchIntervals.Count < Dimensions_D Then Throw New Exception("Search space intervals must be equal search space dimension.")

        _BestChart = New List(Of Double)
        _MeanChart = New List(Of Double)
        _WorstChart = New List(Of Double)

        D = Dimensions_D - 1
        N = PopulationSize_N - 1

        Current_fitness = New Double(N) {}

        gBest = New Double(D) {}
        pBestScore = New Double(N) {}
        pBest = New Double(N, D) {}

        ' -----------Initilize PSO Params---------
        Velocity = New Double(N, D) {}
        Acceleration = New Double(N, D) {}
        '----------------------------------------
        Mass = New Double(N) {}
        Force = New Double(N, D) {}

        ''---------------for SpaceBound()-------------
        Tp = New Integer(D) {}
        Tm = New Integer(D) {}
        TpTildeTm = New Integer(D) {}
        TmpArray = New Double(D) {}
        randiDimm = New Double(D) {}

        ''--------------------------------------------

        If OptimizationType = OptimizationTypeEnum.Minimization Then
            gBestScore = Double.MaxValue
        Else
            gBestScore = Double.MinValue
        End If

        Initialize_Velocities()

        'Initialize solutions:
        InitializePopulation()


    End Sub


    Private Sub Initialize_Velocities()
        For i = 0 To N
            For j = 0 To D
                Velocity(i, j) = 0.3 * RandomGenerator.NextDouble()
            Next
        Next
    End Sub

    Public Sub Space_Bound(ByRef X As Double()())
        ''from matlab site :
        ''https://www.mathworks.com/matlabcentral/answers/311735-hi-i-try-to-convert-this-matlab-code-to-vb-net-or-c-codes-help-me-please
        ''outofrange = X(i, : ) > up | X(i, :) < low;
        ''X(i, outofrange) = rand(1, sum(outofrange)) * (up - low) + low;

        For i As Integer = 0 To Me.N

            For j As Integer = 0 To Me.D
                If X(i)(j) > SearchIntervals.Item(j).Max_Value Then
                    Tp(j) = 1I
                Else
                    Tp(j) = 0I
                End If

                If X(i)(j) < SearchIntervals.Item(j).Min_Value Then
                    Tm(j) = 1I

                Else
                    Tm(j) = 0I
                End If

                value = Tp(j) + Tm(j)

                If value = 0 Then
                    TpTildeTm(j) = 1I
                Else
                    TpTildeTm(j) = 0I
                End If
            Next

            '------------------------------------
            For j As Integer = 0 To Me.D
                TmpArray(j) = X(i)(j) * TpTildeTm(j)
            Next
            '-----------------------------------
            For t = 0 To Me.D
                randiDimm(t) = (RandomGenerator.NextDouble() * (SearchIntervals.Item(t).Max_Value - SearchIntervals.Item(t).Min_Value) + SearchIntervals.Item(t).Min_Value) * (Tp(t) + Tm(t))
            Next

            For t = 0 To Me.D
                X(i)(t) = TmpArray(t) + randiDimm(t)
            Next
        Next
    End Sub

End Class


